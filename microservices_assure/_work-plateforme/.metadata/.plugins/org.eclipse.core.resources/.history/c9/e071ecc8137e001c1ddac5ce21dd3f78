package com.urbanisationsi.microservices_assure.controleur;

import java.net.URI;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.urbanisationsi.microservices_assure.dao.AssureRepository;
import com.urbanisationsi.microservices_assure.exceptions.AssureIntrouvableExcpetion;
import com.urbanisationsi.microservices_assure.modele.Assure;

@RestController
@RequestMapping(path = "/previt")
public class AssureControleur {

	@Autowired
	private AssureRepository assureRepository; // injection du dao

	@PostMapping(path = "/ajouterAssure")
	public ResponseEntity<Void> creerAssure(@RequestBody Assure assure) {
		Assure assureAjoute = assureRepository.save(assure);

		if (assureAjoute == null)
			return ResponseEntity.noContent().build();

		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(assureAjoute.getId())
				.toUri();

		return ResponseEntity.created(uri).build();
	}

	@GetMapping(path = "/listerLesAssures")
	public @ResponseBody Iterable<Assure> getAllAssures() {
		return assureRepository.findAll();
	}

	@GetMapping(path = "/Assure/numeroPersonne/{numeroPersonne}")
	public List<Assure> rechercherAssureNumeroPersonne(@PathVariable Long numeroPersonne) {
		return assureRepository.findByNumeroPersonne(numeroPersonne);
	}
	
	@GetMapping(path = "/rechercherAssureNomPrenom/{nom}/{prenom}")
	public List<Assure> rechercherAssureNumeroPersonne(@PathVariable String nom, @PathVariable String prenom) {
		return assureRepository.findByNomAndPrenom(nom, prenom);
	}
	
	@GetMapping(path = "/Assure/nomContient/{pon}")
	public List<Assure> rechercherAssureContient(@PathVariable String pon) {
		return assureRepository.findByNomContaining(pon);
	}
	
	@GetMapping(path = "/Assure/avantDateNaissance/{date}")
	public List<Assure> rechercherAssureNaissanceAvant(@PathVariable @DateTimeFormat(pattern="dd-MM-yyyy") LocalDate date) {
		return assureRepository.findByDateNaissanceBefore(date);
	}
	
	@GetMapping(path = "Assure/{id}")
	public @ResponseBody Optional<Assure> rechercheAssureId(@PathVariable Integer id){
		Optional<Assure> ass = assureRepository.findById(id);
		if (!ass.isPresent()) throw new AssureIntrouvableExcpetion("L'assure id = " + id + " n'existe pas.");
    	return ass;
	}
	
	@DeleteMapping(path="/Assure/{id}")     
    public void supprimerAssurer(@PathVariable Integer id) {
     assureRepository.deleteById(id);        
    }
	
	@PutMapping(path="/modifierAssure")    
    public void modifierAssure(@RequestBody Assure assure) {
      assureRepository.save(assure);
    }
	
	
	


}
